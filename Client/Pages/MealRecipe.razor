@page "/mealRecipe/{Index:int}"
@using Cookulon.Shared
@using System.Text.Json
@using System.Web

@inject HttpClient Http;
@inject NavigationManager Navigation;
@inject IJSRuntime Js;

@if(loaded == true)
{
    <div class="container mt-5 h-100">

        <div class="d-flex flex-column flex-lg-row justify-content-start">
            <div class="text-center text-lg-start">
                <img src="@recipeImageUrl" class="rounded-3 recipeImage"/>
            </div>
            <div class="flex-grow-1 px-3">
                <h1 class="fw-bold">@recipe.Title</h1>
                <p>@recipe.Summary</p>
                <div class="text-end">
                    <button class="btn btn-success d-print-none" @onclick="Print">Print</button>
                </div>
            </div>
        </div>
        <div class="row row-cols-1 row-cols-md-2">
            <div class="col mt-3">
                <h2>Ingredients</h2>
                <ul>
                    @foreach(var item in recipe.Ingredients)
                    {
                        <li>@item</li>
                    }
                </ul>
            </div>
            <div class="col mt-3">
                <h2>Instructions</h2>
                <ul>
                    @foreach (var item in recipe.Instructions)
                    {
                        <li>@item</li>
                    }
                </ul>
            </div>
        </div>
    </div>
}
else
{
    <KitchenLoadScreen></KitchenLoadScreen>
}



@code {

    [CascadingParameter]
    private RecipeState? recipeState { get; set; }

    // Incoming Index of Meal Recipe from recipeIdeas
    [Parameter]
    public int Index { get; set; }

    protected override void OnInitialized()
    {
        loaded = false;
        GetRecipe();
    }

    private bool loaded = false;
    private string? title;
    private string recipeImageUrl = string.Empty;
    private Recipe? recipe;



    private async void GetRecipe()
    {
        string baseuri = "Recipe/GetRecipe";

        try
        {
            title = recipeState.Ideas.FirstOrDefault(i => i.Index == Index).Title;

            RecipeParms recipeParms = new RecipeParms()
                {
                    MealTime = recipeState.MealTime,
                    Ingredients = recipeState.Ingredients,
                    SelectedIdea = title
                };

            // get the recipe image
            HttpResponseMessage responseImage = await Http.GetAsync($"Recipe/GetRecipeImage?title={HttpUtility.UrlEncode(title)}");
            var recipeImage = await responseImage.Content.ReadFromJsonAsync<RecipeImage>();
            recipeImageUrl = recipeImage!.Data[0]!.Url;


            // get the recipe
            HttpResponseMessage responseRecipe = await Http.PostAsJsonAsync(baseuri, recipeParms);

            responseRecipe.EnsureSuccessStatusCode();

            recipe = (await responseRecipe.Content.ReadFromJsonAsync<Recipe>())!;

            loaded = true;
            StateHasChanged();

        }
        catch
        {
            Console.WriteLine("+_+_+_+_+_+_+_+_ Error: Could not generate Recipe. +_+_+_+_+_+_+_+_+_");
        }
    }

    private async Task Print()
    {
        await Js.InvokeVoidAsync("printInvoke");
    }

}
