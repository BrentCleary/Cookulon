@page "/createmeal"
@using Cookulon.Shared
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@inject NavigationManager navigationManager


<PageTitle>AI Chef - Create Meal</PageTitle>


<div class="container mt-5">
    <div class="row text-center">
        <h1>Create Your Meal</h1>
    </div>
    <div class="row">
        <div class="col">

            <KitchenLoadScreenRefactor></KitchenLoadScreenRefactor>

            <EditForm EditContext="@editcontext">
                <div class="row gy-2 ">
                
                    @* Meal Time Select *@
                    <div class="col-12 mt-3">
                        <label class="form-label">Choose A Meal Time</label>
                        <InputSelect @bind-Value="meal.mealtime" class="form-select border border-success" placeholder="Pick a meal time">
                            <option value="Breakfast">Breakfast</option>
                            <option value="Lunch">Lunch</option>
                            <option value="Dinner">Dinner</option>
                            <option value="Dessert">Dessert</option>
                        </InputSelect>
                    </div>

                    @* Ingredient Input *@
                    <div class="col mt-3">
                        <label class="form-label">Choose Your Ingredients</label>
                        <InputText @bind-Value="meal.ingredient" class="col-12 form-control border border-success mb-2" placeholder="Add Ingredient" mexlength="30"></InputText>
                    </div>
                </div>

                @* Button Bar *@
                <div class="col-12 m-1">
                    <button class="btn btn-outline-success text-success mt-1 me-1" style="width:100px" @onclick="AddIngredient">Add</button>
                    <button class="btn btn-outline-danger text-danger mt-1 me-1" style="width:100px" @onclick="RemoveAll">Clear</button>
                </div>
                <div class="col-12 mt-3">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Ingredients</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var item in ingredients)
                                {
                                    <tr class="border-1">
                                        <td class="align-content-center">
                                            @item.Description.ToUpper()
                                        </td>
                                        <td class="text-end align-content-center pe-3">
                                            <button class="btn btn-outline-danger" @onclick="() => RemoveIngredient(item.Id)">
                                                <i class=" bi bi-trash-fill"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="col-12">

                    <button class="btn btn-success rounded" @onclick="HandleSubmit">Generate All My Recipes</button>

                </div>

            </EditForm>

        </div>
    </div>

</div>

@code {

    [CascadingParameter]
    private RecipeState? rState { get; set; }

    private EditContext? editcontext;
    private List<Ingredient> ingredients = new List<Ingredient>();
    private Meal meal = new();

    // An ingredient to be added if the user enters nothing
    public Ingredient defaultIngredient = new Ingredient
    {
        Id = Guid.NewGuid(),
        Description = "cheese"
    };

    protected override void OnInitialized()
    {
        if(rState is null)
        {
            navigationManager.NavigateTo("/", forceLoad: true);
            return;
        }

        editcontext = new(meal);

        meal.mealtime = rState.MealTime;
        ingredients = rState.Ingredients;
    }

    private class Meal
    {
        public string? mealtime { get; set; }
        public string? ingredient { get; set; }
    }

    private void AddIngredient()
    {
        // Add the ingredient to the ingredient List
        if(!string.IsNullOrEmpty(meal.ingredient))
        {
            ingredients.Add(new Ingredient()
                {
                    Id = Guid.NewGuid(),
                    Description = meal.ingredient
                }
            );
        }

        // clear the textbox
        meal.ingredient = string.Empty;
    }

    private void RemoveAll()
    {
        ingredients.Clear();
    }

    private void RemoveIngredient(Guid id)
    {
        ingredients.Remove(ingredients.First(i => i.Id == id));
    }

    private void HandleSubmit()
    {
        rState.MealTime = meal.mealtime;

        if(ingredients.Count != 0)
        {
            rState.Ingredients = ingredients;
        }
        else
        {
            ingredients.Add(defaultIngredient);
            rState.Ingredients = ingredients;
        }

        navigationManager.NavigateTo("/mealIdeas");
    }
}
